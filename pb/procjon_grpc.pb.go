// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProcjonClient is the client API for Procjon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcjonClient interface {
	RegisterService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Empty, error)
	SendServiceStatus(ctx context.Context, opts ...grpc.CallOption) (Procjon_SendServiceStatusClient, error)
}

type procjonClient struct {
	cc grpc.ClientConnInterface
}

func NewProcjonClient(cc grpc.ClientConnInterface) ProcjonClient {
	return &procjonClient{cc}
}

func (c *procjonClient) RegisterService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Procjon/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *procjonClient) SendServiceStatus(ctx context.Context, opts ...grpc.CallOption) (Procjon_SendServiceStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Procjon_serviceDesc.Streams[0], "/Procjon/SendServiceStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &procjonSendServiceStatusClient{stream}
	return x, nil
}

type Procjon_SendServiceStatusClient interface {
	Send(*ServiceStatus) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type procjonSendServiceStatusClient struct {
	grpc.ClientStream
}

func (x *procjonSendServiceStatusClient) Send(m *ServiceStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *procjonSendServiceStatusClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcjonServer is the server API for Procjon service.
// All implementations must embed UnimplementedProcjonServer
// for forward compatibility
type ProcjonServer interface {
	RegisterService(context.Context, *Service) (*Empty, error)
	SendServiceStatus(Procjon_SendServiceStatusServer) error
	mustEmbedUnimplementedProcjonServer()
}

// UnimplementedProcjonServer must be embedded to have forward compatible implementations.
type UnimplementedProcjonServer struct {
}

func (*UnimplementedProcjonServer) RegisterService(context.Context, *Service) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (*UnimplementedProcjonServer) SendServiceStatus(Procjon_SendServiceStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method SendServiceStatus not implemented")
}
func (*UnimplementedProcjonServer) mustEmbedUnimplementedProcjonServer() {}

func RegisterProcjonServer(s *grpc.Server, srv ProcjonServer) {
	s.RegisterService(&_Procjon_serviceDesc, srv)
}

func _Procjon_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcjonServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Procjon/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcjonServer).RegisterService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Procjon_SendServiceStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcjonServer).SendServiceStatus(&procjonSendServiceStatusServer{stream})
}

type Procjon_SendServiceStatusServer interface {
	SendAndClose(*Empty) error
	Recv() (*ServiceStatus, error)
	grpc.ServerStream
}

type procjonSendServiceStatusServer struct {
	grpc.ServerStream
}

func (x *procjonSendServiceStatusServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *procjonSendServiceStatusServer) Recv() (*ServiceStatus, error) {
	m := new(ServiceStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Procjon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Procjon",
	HandlerType: (*ProcjonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _Procjon_RegisterService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendServiceStatus",
			Handler:       _Procjon_SendServiceStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/procjon.proto",
}
